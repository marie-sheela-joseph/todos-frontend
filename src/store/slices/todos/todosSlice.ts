import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../store';
import { url } from '../../../api/index';

type todoType = {
  _id: string;
  title: string;
  completed: boolean;
  assignedTo: string[];
  createdAt: Date;
  moreDetails: {
    priority: number;
    dueDate: Date;
  };
};

type newTodoType = {
  title: string;
  completed: boolean;
  assignedTo: string[];
  createdAt?: Date;
  moreDetails: {
    priority: number;
    dueDate: Date;
  };
};

type updateTodoType = {
  _id: string;
  title?: string;
  completed?: boolean;
  assignedTo?: string[];
  createdAt?: Date;
  moreDetails?: {
    priority?: number;
    dueDate?: string;
  };
};

export interface todosState {
  todos: todoType[];
  status: 'idle' | 'loading' | 'failed';
}

const initialState: todosState = {
  todos: [],
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getTodos = createAsyncThunk('todos/getTodos', async () => {
  const response = await fetch(url, {
    method: 'GET',
  });
  const data = response.json();
  // The value we return becomes the `fulfilled` action payload
  console.log(data);
  return data;
});

export const postTodos = createAsyncThunk(
  'todos/postTodo',
  async (todo: newTodoType) => {
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        todo,
      }),
    });
    const data = await response.json();
    return data;
  }
);

export const deleteTodo = createAsyncThunk(
  'todos/deleteTodo',
  async (id: string) => {
    const response = await fetch(`${url}/${id}`, {
      method: 'delete',
    });
    const data = await response.json();
    return data;
  }
);

export const patchTodo = createAsyncThunk(
  'todos/patchTodo',
  async (todo: updateTodoType) => {
    const { _id } = todo;
    const response = await fetch(`${url}/${_id}`, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        todo,
      }),
    });
    const data = await response.json();
    console.log(data);
    return data;
  }
);

export const todosSlice = createSlice({
  name: 'todos',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // increment: (state) => {
    //   // Redux Toolkit allows us to write "mutating" logic in reducers. It
    //   // doesn't actually mutate the state because it uses the Immer library,
    //   // which detects changes to a "draft state" and produces a brand new
    //   // immutable state based off those changes
    //   state.value += 1;
    // },
    // decrement: (state) => {
    //   state.value -= 1;
    // },
    // // Use the PayloadAction type to declare the contents of `action.payload`
    // incrementByAmount: (state, action: PayloadAction<number>) => {
    //   state.value += action.payload;
    // },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getTodos.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getTodos.fulfilled, (state, action) => {
        state.todos = action.payload;
        state.status = 'idle';
        // state.value += action.payload;
      })
      .addCase(getTodos.rejected, (state) => {
        state.status = 'failed';
      })
      .addCase(postTodos.fulfilled, (state, action) => {
        state.todos.push(action.payload);
      })
      .addCase(deleteTodo.fulfilled, (state, action) => {
        const { _id } = action.payload;
        if (_id) {
          state.todos = state.todos.filter((todo) => todo._id !== _id);
        }
      })
      .addCase(patchTodo.fulfilled, (state, action) => {
        state.todos = state.todos.map((todo) =>
          todo._id === action.payload._id ? action.payload : todo
        );
      });
  },
});

export const {} = todosSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.todos.value)`
export const selectTodos = (state: RootState) => state.todos;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default todosSlice.reducer;
